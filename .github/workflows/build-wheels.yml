name: Build Wheels

on:
  push:
    tags:
      - '*'
    branches:
      - develop
      - ci/*

  pull_request:
    types:
      - opened
      - synchronize
    branches:
      - develop

jobs:
  build-wheels:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest, macOS-latest ]
    env:
      CIBW_BUILD: "cp3*"
      CIBW_SKIP: "cp36* *-musllinux_*"
      CIBW_ARCHS: native
      CIBW_BUILD_FRONTEND: build
      CIBW_MANYLINUX_X86_64_IMAGE: webis/resiliparse-manylinux2014_x86_64

      CIBW_TEST_EXTRAS: all,test
      CIBW_TEST_SKIP: "*-macosx_arm64"    # Apple Silicon wheels cannot be tested

      CIBW_ENVIRONMENT: PYTHONPATH="$PYTHONPATH"

      CIBW_ARCHS_MACOS: "x86_64 arm64"
      CIBW_REPAIR_WHEEL_COMMAND_MACOS: >-
        DYLD_LIBRARY_PATH=$LIBRARY_PATH delocate-listdeps {wheel} &&
        DYLD_LIBRARY_PATH=$LIBRARY_PATH delocate-wheel --require-archs {delocate_archs} -w {dest_dir} {wheel}

      CIBW_BEFORE_BUILD_WINDOWS: "pip install delvewheel"
      CIBW_REPAIR_WHEEL_COMMAND_WINDOWS: >-
        delvewheel repair --add-path C:\vcpkg\installed\x64-windows\bin -w {dest_dir} {wheel}

      PYTHONPATH: ../resiliparse:../fastwarc
      CPATH: /usr/local/share/vcpkg/installed/x64-osx/include:/usr/local/share/vcpkg/installed/arm64-osx/include
      LIBRARY_PATH: /usr/local/share/vcpkg/installed/x64-osx/lib:/usr/local/share/vcpkg/installed/arm64-osx/lib
      INCLUDE: C:\vcpkg\installed\x64-windows\include
      LIB: C:\vcpkg\installed\x64-windows\lib
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Cache Vcpkg
        uses: actions/cache@v3
        id: cache-vcpkg
        if: runner.os == 'macOS' || runner.os == 'Windows'
        with:
          path: |
            /usr/local/share/vcpkg/installed
            C:\vcpkg\installed
          key: ${{ runner.os }}-vcpkg-8     # INCREMENT ME!!

      - name: Install Vcpkg Dependencies
        if: (runner.os == 'macOS' || runner.os == 'Windows') && steps.cache-vcpkg.outputs.cache-hit != 'true'
        shell: bash
        run: |
          set -e
          
          PKG_LIST="lz4 lexbor uchardet zlib re2"
          
          # MacOS
          if [ -d /usr/local/share/vcpkg/ports ]; then
            cp -rv .vcpkg/ports/* /usr/local/share/vcpkg/ports
            
            export VCPKG_DEFAULT_TRIPLET=x64-osx
            vcpkg install $PKG_LIST
            
            export VCPKG_DEFAULT_TRIPLET=arm64-osx
            vcpkg install $PKG_LIST
            
          # Windows
          elif [ -d /c/vcpkg ]; then
            cp -rv .vcpkg/ports/* /c/vcpkg/ports
            export VCPKG_DEFAULT_TRIPLET=x64-windows
            vcpkg install $PKG_LIST
          
          else
            exit 1
          fi

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install cibuildwheel
        run: python -m pip install cibuildwheel==2.11.2

      - name: Build FastWARC
        run: python -m cibuildwheel --output-dir wheelhouse fastwarc
        env:
          CIBW_TEST_COMMAND: python -m pytest --capture=sys --verbose {project}/tests/fastwarc

      - name: Build Resiliparse
        run: python -m cibuildwheel --output-dir wheelhouse resiliparse
        env:
          CIBW_BEFORE_TEST: >-
            python -c "import glob, platform; open('fastwarc.txt', 'w').write(glob.glob(
              'wheelhouse/FastWARC-*cp' + ''.join(map(str, platform.python_version_tuple()[:2])) + '-*_' + platform.machine().lower() + '.whl')[0])" &&
            python -m pip install -r fastwarc.txt
          CIBW_TEST_COMMAND: python -m pytest --capture=sys --verbose {project}/tests/resiliparse

      - name: Upload Wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: ./wheelhouse/*.whl

  build-sdist:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Build Module
        run: python3 -m pip install build

      - name: Build FastWARC Source Dist
        run: python3 -m build --sdist --outdir dist fastwarc

      - name: Build Resiliparse Source Dist
        run: python3 -m build --sdist --outdir dist resiliparse

      - name: Upload Source Dists
        uses: actions/upload-artifact@v3
        with:
          name: sdist
          path: ./dist/*.tar.gz

  build-asan:
    runs-on: ubuntu-latest
    container:
      image: webis/resiliparse-manylinux2014_x86_64
    env:
      DEBUG: "1"
      ASAN: "1"
      ASAN_OPTIONS: leak_check_at_exit=0
      PYTHON: /opt/python/cp39-cp39/bin/python
      PYTHONPATH: resiliparse:fastwarc

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Build Extensions
        run: |
          set -e
          $PYTHON -m pip install -e "fastwarc[all,test]"
          $PYTHON -m pip install -e "resiliparse[all,test]"

      - name: Run Tests
        run: |
          export LD_PRELOAD="$(ldconfig -p | grep libasan | head -n1 | awk '{print $4}')"
          $PYTHON -m pytest --capture=sys --verbose tests/

  build-coverage:
    runs-on: ubuntu-latest
    container:
      image: webis/resiliparse-manylinux2014_x86_64
    needs: [ build-wheels, build-asan, build-sdist ]
    env:
      TRACE: "1"
      PYTHON: /opt/python/cp39-cp39/bin/python
      PYTHONPATH: resiliparse:fastwarc

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Build Extensions
        run: |
          set -e
          $PYTHON -m pip install cython
          $PYTHON -m pip install -e "fastwarc[all,test]"
          $PYTHON -m pip install -e "resiliparse[all,test]"

      - name: Run Tests
        run: $PYTHON -m pytest --cov=resiliparse/ --cov=fastwarc/ --cov=resiliparse_common/ --cov-report xml tests/

      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: coverage
          path: coverage.xml

      - name: Upload to Codecov
        uses: codecov/codecov-action@v3
        with:
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}

  build-documentation:
    runs-on: ubuntu-latest
    needs: build-wheels
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          name: wheels
          path: wheelhouse

      - name: Build Documentation
        run: |
          set -e

          python -m pip install twine
          grep -vE "fastwarc|resiliparse" docs/requirements.txt | xargs python -m pip install
          
          PYTHON_ABI="$(python -c "import sys; print(''.join(map(str, sys.version_info[:2])))")"
          find wheelhouse -name "FastWARC-*cp$PYTHON_ABI-*-manylinux*.whl" | xargs -I% python -m pip install "%[all]"
          find wheelhouse -name "Resiliparse-*cp$PYTHON_ABI-*-manylinux*.whl" | xargs -I% python -m pip install "%[all]"

          cd docs
          make html

      - name: Trigger Readthedocs Build
        if: github.ref == 'refs/heads/develop' || startsWith(github.ref, 'refs/tags/v')
        uses: dfm/rtds-action@v1
        with:
          webhook_url: ${{ secrets.RTDS_WEBHOOK_URL }}
          webhook_token: ${{ secrets.RTDS_WEBHOOK_TOKEN }}
          commit_ref: ${{ github.ref }}

  publish-wheels:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [ build-wheels, build-sdist, build-documentation ]
    steps:
      - name: Download Wheels
        uses: actions/download-artifact@v3
        with:
          name: wheels

      - name: Download Source Dist
        uses: actions/download-artifact@v3
        with:
          name: sdist

      - name: Publish to PyPi
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD1: ${{ secrets.PYPI_FASTWARC_API_TOKEN }}
          TWINE_PASSWORD2: ${{ secrets.PYPI_RESILIPARSE_API_TOKEN }}
        run: |
          set -e

          python3 -m pip install twine

          TWINE_PASSWORD="$TWINE_PASSWORD1" python3 -m twine upload FastWARC-*.whl FastWARC-*.tar.gz
          TWINE_PASSWORD="$TWINE_PASSWORD2" python3 -m twine upload Resiliparse-*.whl Resiliparse-*.tar.gz

      - name: Wait
        run: sleep 30

      - name: Trigger Readthedocs Build
        uses: dfm/rtds-action@v1
        with:
          webhook_url: ${{ secrets.RTDS_WEBHOOK_URL }}
          webhook_token: ${{ secrets.RTDS_WEBHOOK_TOKEN }}
          commit_ref: ${{ github.ref }}
